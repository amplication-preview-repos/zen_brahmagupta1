/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Instructor as PrismaInstructor } from "@prisma/client";

export class InstructorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstructorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.instructor.count(args);
  }

  async instructors(
    args: Prisma.InstructorFindManyArgs
  ): Promise<PrismaInstructor[]> {
    return this.prisma.instructor.findMany(args);
  }
  async instructor(
    args: Prisma.InstructorFindUniqueArgs
  ): Promise<PrismaInstructor | null> {
    return this.prisma.instructor.findUnique(args);
  }
  async createInstructor(
    args: Prisma.InstructorCreateArgs
  ): Promise<PrismaInstructor> {
    return this.prisma.instructor.create(args);
  }
  async updateInstructor(
    args: Prisma.InstructorUpdateArgs
  ): Promise<PrismaInstructor> {
    return this.prisma.instructor.update(args);
  }
  async deleteInstructor(
    args: Prisma.InstructorDeleteArgs
  ): Promise<PrismaInstructor> {
    return this.prisma.instructor.delete(args);
  }
}
